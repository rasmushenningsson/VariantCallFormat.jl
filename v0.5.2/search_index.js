var documenterSearchIndex = {"docs":
[{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"CurrentModule = VariantCallFormat\nDocTestSetup = quote\n    using VariantCallFormat\nend","category":"page"},{"location":"vcf-bcf/#VCF-and-BCF-Formatted-files","page":"VCF and BCF formatted files","title":"VCF and BCF Formatted files","text":"","category":"section"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"VCF is a text-based file format for representing genetic polymorphism.","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"VCF files can be read using VCF.Reader, respectively:","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"reader = VCF.Reader(open(\"example.vcf\", \"r\"))\nfor record in reader\n    # do something\nend\nclose(reader)","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"A reader first reads the header section of a file and creates a VCF.Header object. The header function is provided to access the header object of a reader:","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"julia> header(reader)\nVariantCallFormat.Header:\n  metainfo tags: fileformat fileDate source reference contig phasing INFO FILTER FORMAT\n     sample IDs: NA00001 NA00002 NA00003\n\njulia> findall(header(reader), \"FORMAT\")\n4-element Array{VariantCallFormat.MetaInfo,1}:\n VariantCallFormat.MetaInfo:\n    tag: FORMAT\n  value: ID=\"GT\" Number=\"1\" Type=\"String\" Description=\"Genotype\"          \n VariantCallFormat.MetaInfo:\n    tag: FORMAT\n  value: ID=\"GQ\" Number=\"1\" Type=\"Integer\" Description=\"Genotype Quality\"\n VariantCallFormat.MetaInfo:\n    tag: FORMAT\n  value: ID=\"DP\" Number=\"1\" Type=\"Integer\" Description=\"Read Depth\"       \n VariantCallFormat.MetaInfo:\n    tag: FORMAT\n  value: ID=\"HQ\" Number=\"2\" Type=\"Integer\" Description=\"Haplotype Quality\"","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"VariantCallFormat.MetaInfo variables in the header support the following accessors:","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"Accessor Description\nmetainfotag tag string\nmetainfoval value string\nkeys keys of fields between '<' and '>'\nvalues values of fields between '<' and '>'\n[<key>] value of a field with key","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"julia> metainfo = VariantCallFormat.MetaInfo(\"##FORMAT=<ID=GT,Number=1,Type=String,Description=\\\"Genotype\\\">\")\nVariantCallFormat.MetaInfo:\n    tag: FORMAT\n  value: ID=\"GT\" Number=\"1\" Type=\"String\" Description=\"Genotype\"\n\njulia> metainfotag(metainfo)\n\"FORMAT\"\n\njulia> metainfoval(metainfo)\n\"<ID=GT,Number=1,Type=String,Description=\\\"Genotype\\\">\"\n\njulia> keys(metainfo)\n4-element Array{String,1}:\n \"ID\"         \n \"Number\"     \n \"Type\"       \n \"Description\"\n\njulia> metainfo[\"ID\"]\n\"GT\"\n","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"VCF.Record and BCF.Record variables support the following accessor functions (see the docstring of each accessor for the details):","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"Accessor Description\nchrom chromosome name\npos reference position\nid unique identifiers\nref reference bases\nalt alternate bases\nqual Phred-scaled quality score\nfilter filter status\ninfo additional information\ninfokeys keys of additional information\nformat genotype format\ngenotype genotype information","category":"page"},{"location":"vcf-bcf/","page":"VCF and BCF formatted files","title":"VCF and BCF formatted files","text":"julia> record = VCF.Record(\"20\\t14370\\trs6054257\\tG\\tA\\t29\\tPASS\\tNS=3;DP=14;AF=0.5;DB;H2\\tGT:GQ:DP:HQ\\t0|0:48:1:51,51\\t1|0:48:8:51,51\")\nVariantCallFormat.Record:\n   chromosome: 20\n     position: 14370\n   identifier: rs6054257\n    reference: G\n    alternate: A\n      quality: 29.0\n       filter: PASS\n  information: NS=3 DP=14 AF=0.5 DB H2\n       format: GT GQ DP HQ\n     genotype: [1] 0|0 48 1 51,51 [2] 1|0 48 8 51,51\n\njulia> VCF.chrom(record)\n\"20\"\n\njulia> VCF.pos(record)\n14370\n\njulia> VCF.id(record)\n1-element Array{String,1}:\n \"rs6054257\"\n\njulia> VCF.ref(record)\n\"G\"\n\njulia> VCF.alt(record)\n1-element Array{String,1}:\n \"A\"\n\njulia> VCF.qual(record)\n29.0\n\njulia> VCF.filter(record)\n1-element Array{String,1}:\n \"PASS\"\n\njulia> VCF.info(record)\n5-element Array{Pair{String,String},1}:\n \"NS\"=>\"3\"  \n \"DP\"=>\"14\"\n \"AF\"=>\"0.5\"\n \"DB\"=>\"\"   \n \"H2\"=>\"\"   \n\njulia> VCF.format(record)\n4-element Array{String,1}:\n \"GT\"\n \"GQ\"\n \"DP\"\n \"HQ\"\n\njulia> VCF.genotype(record)\n2-element Array{Array{String,1},1}:\n String[\"0|0\",\"48\",\"1\",\"51,51\"]\n String[\"1|0\",\"48\",\"8\",\"51,51\"]\n\njulia> VCF.genotype(record, 1:2, \"GT\")\n2-element Array{String,1}:\n \"0|0\"\n \"1|0\"\n\njulia> VCF.genotype(record, 1:1, \"GT\")\n1-element Array{String,1}:\n \"0|0\"\n\njulia> VCF.genotype(record, 1:2, \"GT\")\n2-element Array{String,1}:\n \"0|0\"\n \"1|0\"\n","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [VariantCallFormat]","category":"page"},{"location":"reference/#VariantCallFormat.Header-Tuple{Vector{T} where T, Vector{T} where T}","page":"Reference","title":"VariantCallFormat.Header","text":"VCF.Header(metainfo::Vector, sampleID::Vector)\n\nCreate a VCF header with metainfo and sampleID.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.Header-Tuple{}","page":"Reference","title":"VariantCallFormat.Header","text":"VCF.Header()\n\nCreate an empty VCF header.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.MetaInfo-Tuple{AbstractString}","page":"Reference","title":"VariantCallFormat.MetaInfo","text":"VCF.MetaInfo(str::AbstractString)\n\nCreate a VCF metainfo from str containing a VCF header line. This function verifies the format and indexes fields for accessors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.MetaInfo-Tuple{Vector{UInt8}}","page":"Reference","title":"VariantCallFormat.MetaInfo","text":"VCF.MetaInfo(data::Vector{UInt8})\n\nCreate a VCF metainfo from data containing a VCF header line. This function verifies the format and indexes fields for accessors. Note that the ownership of data is transferred to a new metainfo object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.MetaInfo-Tuple{}","page":"Reference","title":"VariantCallFormat.MetaInfo","text":"VCF.MetaInfo()\n\nCreate an unfilled VCF metainfo.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.Reader-Tuple{IO}","page":"Reference","title":"VariantCallFormat.Reader","text":"VCF.Reader(input::IO)\n\nCreate a data reader of the VCF file format.\n\nArguments\n\ninput: data source\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.Record-Tuple{AbstractString}","page":"Reference","title":"VariantCallFormat.Record","text":"VCF.Record(str::AbstractString)\n\nCreate a VCF object from str containing a VCF record. This function verifies the format and indexes fields for accessors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.Record-Tuple{Vector{UInt8}}","page":"Reference","title":"VariantCallFormat.Record","text":"VCF.Record(data::Vector{UInt8})\n\nCreate a VCF object from data containing a VCF record. This function verifies the format and indexes fields for accessors. Note that the ownership of data is transferred to a new record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.Record-Tuple{}","page":"Reference","title":"VariantCallFormat.Record","text":"VCF.Record()\n\nCreate an unfilled VCF record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.Writer-Tuple{IO, VariantCallFormat.Header}","page":"Reference","title":"VariantCallFormat.Writer","text":"VCF.Writer(output::IO, header::VCF.Header)\n\nCreate a data writer of the VCF file format.\n\nArguments\n\noutput: data sink\nheader: VCF header object\n\n\n\n\n\n","category":"method"},{"location":"reference/#BioCore.header-Tuple{VariantCallFormat.Reader}","page":"Reference","title":"BioCore.header","text":"header(reader::VCF.Reader)::VCF.Header\n\nGet the header of reader.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.alt-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.alt","text":"alt(record::Record)::Vector{String}\n\nGet the alternate bases of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.chrom-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.chrom","text":"chrom(record::Record)::String\n\nGet the chromosome name of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.filter-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.filter","text":"filter(record::Record)::Vector{String}\n\nGet the filter status of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.format-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.format","text":"format(record::Record)::Vector{String}\n\nGet the genotype format of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.genotype-Tuple{VariantCallFormat.Record, Integer, String}","page":"Reference","title":"VariantCallFormat.genotype","text":"genotype(record::Record, indexes, keys)\n\nGet the genotypes in record that match indexes and keys. indexes and keys can be either a scalar or a vector value. Trailing fields that are dropped are filled with \".\".\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.genotype-Tuple{VariantCallFormat.Record, Integer}","page":"Reference","title":"VariantCallFormat.genotype","text":"genotype(record::Record, index::Integer)::Vector{String}\n\nGet the genotypes of the index-th individual in record. This is effectively equivalent to genotype(record)[index] but more efficient.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.genotype-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.genotype","text":"genotype(record::Record)::Vector{Vector{String}}\n\nGet the genotypes of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.id-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.id","text":"id(record::Record)::Vector{String}\n\nGet the identifiers of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.info-Tuple{VariantCallFormat.Record, String}","page":"Reference","title":"VariantCallFormat.info","text":"info(record::Record, key::String)::String\n\nGet the additional information of record with key. Keys without corresponding values return an empty string.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.info-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.info","text":"info(record::Record)::Vector{Pair{String,String}}\n\nGet the additional information of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.infokeys-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.infokeys","text":"infokeys(record::Record)::Vector{String}\n\nGet the keys of the additional information of record. This function returns an empty vector when the INFO field is missing.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.pos-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.pos","text":"pos(record::Record)::Int\n\nGet the reference position of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.qual-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.qual","text":"qual(record::Record)::Float64\n\nGet the quality score of record.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VariantCallFormat.ref-Tuple{VariantCallFormat.Record}","page":"Reference","title":"VariantCallFormat.ref","text":"ref(record::Record)::String\n\nGet the reference bases of record.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = VariantCallFormat","category":"page"},{"location":"#VariantCallFormat.jl","page":"Home","title":"VariantCallFormat.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: MIT License) (Image: Build Status) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"VariantCallFormat.jl is based on previous work in GeneticVariation.jl. Big thanks to the original authors!","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"VariantCallFormat.jl provides read/write functionality for VCF files as well as for its binary sister format BCF.","category":"page"},{"location":"","page":"Home","title":"Home","text":"VCF files are use ubiquitously in bioinformatics to represent genetic variants.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install VariantCallFormat.jl from the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"VariantCallFormat\")","category":"page"},{"location":"#Further-Reading","page":"Home","title":"Further Reading","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"VCF and BCF file format descriptions.","category":"page"}]
}
